#version 430 core

#extension GL_KHR_shader_subgroup_basic  : enable
#extension GL_KHR_shader_subgroup_ballot : enable

// This is the external representation of PGTOs that are supplied with the CGTOs
struct PGTO {
    float coeff;
    float alpha;
    float radius;
    uint packed_ijkl;
};

struct CGTO {
    vec3 center;
    uint off_len;
};

layout (binding = 0, std430) readonly restrict buffer CGTO_XYZR_BUFFER {
    vec4 cgto_xyzr[];
};

layout (binding = 1, std430) readonly restrict buffer CGTO_OFF_LEN_BUFFER {
    uint cgto_offset[];
};

layout (binding = 2, std430) readonly restrict buffer PGTO_BUFFER {
    PGTO pgto_data[];
};

layout (binding = 3, std430) readonly restrict buffer D_BUFFER {
    float D_matrix[];
};

layout(location = 0) uniform mat4 world_to_model;
layout(location = 1) uniform mat4 index_to_world;
layout(location = 2) uniform vec3 step;
layout(location = 3) uniform uint num_cgtos;

layout(binding = 0) writeonly restrict uniform image3D out_vol;

float safe_pow(float base, uint exp) {
    switch(exp) {
    case 4: return (base * base) * (base * base);
    case 3: return (base * base) * base;
    case 2: return base * base;
    case 1: return base;
    case 0: return 1.0;
    }
}

uvec4 unpack_ijkl(in uint packed_ijkl) {
    return uvec4(
        (packed_ijkl >>  0) & 0xFFu,
        (packed_ijkl >>  8) & 0xFFu,
        (packed_ijkl >> 16) & 0xFFu,
        (packed_ijkl >> 24) & 0xFFu
    );
}

uint unpack_offset(in uint packed_off_len) {
    return packed_off_len & 0x00FFFFFFu;
}

uint unpack_length(in uint packed_off_len) {
    return packed_off_len >> 24u;
}

uint pack_offset_length(in uint offset, in uint length) {
    return (length << 24u) | offset;
}

uint get_matrix_index(uint row, uint col) {
    uint i = max(row, col);
    uint j = min(row, col);
    return (i * (i + 1)) / 2 + j;
}

#define WG_SIZE 512
#define TILE_SIZE 32
#define TILE_AREA (TILE_SIZE*TILE_SIZE)
#define MAX_PRUNED_CGTOS 2048
#define MAX_TILE_PGTOS (TILE_SIZE * 16)
#define INVALID_CGTO_IDX 0xFFFFFFFFu

shared uint  pruned_cgto_idx[MAX_PRUNED_CGTOS];
shared uint  num_pruned_cgtos;

shared float D_tile[TILE_SIZE][TILE_SIZE];
shared CGTO  cgtos_tile[TILE_SIZE];
shared PGTO  pgtos_tile[MAX_TILE_PGTOS];
shared uint  num_pgtos;

// Populate the D GSM from the global D_matrix
void fill_D_tile(uint tile_i, uint tile_j) {
    uint thread_id = gl_LocalInvocationIndex;
    for (uint idx = thread_id; idx < TILE_AREA; idx += WG_SIZE) {
        uint i = idx / TILE_SIZE;
        uint j = idx % TILE_SIZE;

        uint global_i = pruned_cgto_idx[tile_i * TILE_SIZE + i];
        uint global_j = pruned_cgto_idx[tile_j * TILE_SIZE + j];

        float D_value = 0.0;
        if ((global_i != INVALID_CGTO_IDX) && (global_j != INVALID_CGTO_IDX)) {
            D_value = D_matrix[get_matrix_index(global_i, global_j)];
        }

        D_tile[i][j] = D_value;
    }
}

// Populate CGTO and PGTO GSM with CGTOs found in tile
void fill_cgtos_tile(uint tile_offset) {
    uint thread_id = gl_LocalInvocationIndex;
    uint tile_idx = thread_id;

    if (tile_idx < TILE_SIZE) {
        uint global_cgto_idx = pruned_cgto_idx[tile_offset * TILE_SIZE + tile_idx];
        if (global_cgto_idx != INVALID_CGTO_IDX) {
            vec3 center   = cgto_xyzr[global_cgto_idx].xyz;
            uint offset   = cgto_offset[global_cgto_idx];
            uint length   = cgto_offset[global_cgto_idx + 1];
            uint dst_base = atomicAdd(num_pgtos, length);

            cgtos_tile[tile_idx].center  = center;
            cgtos_tile[tile_idx].off_len = pack_offset_length(dst_base, length);

            for (uint k = 0; k < length; ++k) {
                uint src_idx = offset   + k;
                uint dst_idx = dst_base + k;
                if (dst_idx < MAX_TILE_PGTOS) {
                    pgtos_tile[dst_idx] = pgto_data[src_idx];
                }
            }
        }
    }
}

// Evaluate thread local phi values for cgto_tile for the supplied coordinate
void eval_phis(out float out_phi[TILE_SIZE], vec3 coord) {
    uint thread_id = gl_LocalInvocationIndex;

    for (uint i = 0; i < TILE_SIZE; ++i) {
        float phi = 0.0;

        vec3 center = cgtos_tile[i].center;
        uint offset = unpack_offset(cgtos_tile[i].off_len);
        uint length = unpack_length(cgtos_tile[i].off_len);

        // Sum over PGTOs for this CGTO
        for (uint j = offset; j < offset + length; ++j) {
            PGTO pgto = pgtos_tile[j];
            uvec4 ijkl = unpack_ijkl(pgto.packed_ijkl);
            vec3 d = coord - center;
            float r2 = dot(d, d);
            float fx = safe_pow(d.x, ijkl.x);
            float fy = safe_pow(d.y, ijkl.y);
            float fz = safe_pow(d.z, ijkl.z);
            phi += pgto.coeff * fx * fy * fz * exp(-pgto.alpha * r2);
        }

        out_phi[i] = phi;
    }
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() {
    uint thread_id = gl_LocalInvocationIndex;
    if (thread_id == 0) {
        num_pruned_cgtos = 0;
    }
    barrier();

    vec3 model_aabb_min = vec3( gl_WorkGroupID.xyz                 * gl_WorkGroupSize.xyz) * step;
    vec3 model_aabb_max = vec3((gl_WorkGroupID.xyz + uvec3(1,1,1)) * gl_WorkGroupSize.xyz) * step;

    for (uint i = thread_id; i < num_cgtos; i += WG_SIZE) {
        vec4 cgto = cgto_xyzr[i];
        if (cgto.w == 0.0) continue;

        vec3 model_xyz = vec3(world_to_model * vec4(cgto.xyz, 1.0));
        float r2       = cgto.w * cgto.w;

        vec3   d = clamp(model_xyz, model_aabb_min, model_aabb_max) - model_xyz;
        float d2 = dot(d, d);

        if (d2 < r2) {
            // Push to GSM CGTOs
            uint idx = atomicAdd(num_pruned_cgtos, 1);
            pruned_cgto_idx[idx] = i;
        }
    }

    // Write invalid indices for the unused portion of pruned_cgto_idx
    for (uint i = thread_id; i < MAX_PRUNED_CGTOS; i += WG_SIZE) {
        if (i >= num_pruned_cgtos) {
            pruned_cgto_idx[i] = INVALID_CGTO_IDX;
        }
    }

    float phi_tile_mu[TILE_SIZE]; // evaluated φ_μ(r) in registers
    float phi_tile_nu[TILE_SIZE]; // evaluated φ_ν(r) in registers
    vec3 coord = (index_to_world * vec4(gl_GlobalInvocationID.xyz, 1.0)).xyz;
    float rho  = 0.0;

    // DIV UP
    uint num_tiles = (num_pruned_cgtos + TILE_SIZE - 1) / TILE_SIZE;

    for (uint tile_i = 0; tile_i < num_tiles; ++tile_i) {
        // DIAGONAL TILE

        if (thread_id == 0) {
            num_pgtos = 0;
        }

        barrier();

        // Populate GSM
        fill_D_tile(tile_i, tile_i);
        fill_cgtos_tile(tile_i);

        barrier();

        // Evaluate into phi
        eval_phis(phi_tile_mu, coord);

        // Diagonal tile Contribution loop
        for (uint i = 0; i < TILE_SIZE; ++i) {
            rho += D_tile[i][i] * phi_tile_mu[i] * phi_tile_mu[i];            // Diagonal
            for (uint j = i + 1; j < TILE_SIZE; ++j) {
                rho += 2.0 * D_tile[i][j] * phi_tile_mu[i] * phi_tile_mu[j];  // Off-diagonal
            }
        }

        for (uint tile_j = tile_i + 1; tile_j < num_tiles; ++tile_j) {
            // OFF DIAGONAL TILE

            if (thread_id == 0) {
                num_pgtos = 0;
            }

            barrier();

            // Populate GSM
            fill_D_tile(tile_i, tile_j);
            fill_cgtos_tile(tile_j);

            barrier();

            // Evaluate into phi
            eval_phis(phi_tile_nu, coord);

            // Off-Diagonal tile Contribution loop
            for (uint i = 0; i < TILE_SIZE; ++i) {
                for (uint j = 0; j < TILE_SIZE; ++j) {
                    rho += 2.0 * D_tile[i][j] * phi_tile_mu[i] * phi_tile_nu[j];
                }
            }
        }
    }
    
    // Step 3: Write result
    ivec3 vol_idx = ivec3(gl_GlobalInvocationID.xyz);
    if (all(lessThan(vol_idx, imageSize(out_vol)))) {
        imageStore(out_vol, vol_idx, vec4(rho));
    }
}