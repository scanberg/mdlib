#version 460

#include "common.h"
#include "culling.glsl"

layout (binding = 0, std140) uniform UboBuffer {
    UniformData ubo;
};

layout (binding = TRANSFORM_BINDING, std430) readonly buffer TransformBuffer {
	mat4 transforms[];
};

layout (binding = INSTANCE_DATA_BINDING, std430) readonly buffer InInstanceData {
	InstanceData in_inst[];
};

layout (binding = INSTANCE_VIS_IDX_BINDING, std430) writeonly buffer OutInstVisIdxBuffer {
	uint out_inst_vis_idx[];
};

layout (binding = INSTANCE_OCC_IDX_BINDING, std430) writeonly buffer OutInstOccIdxBuffer {
	uint out_inst_occ_idx[];
};

layout (binding = DRAW_INDIRECT_PARAM_BINDING, std430) buffer ParamBuffer {
	DrawParameters param;
};

layout(binding = 0) uniform sampler2D in_depth_pyramid_tex;

layout (local_size_x = INSTANCE_CULL_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

void main() {
	if (gl_GlobalInvocationID.x < param.instance_count) {
		uint inst_idx = gl_GlobalInvocationID.x;
		InstanceData inst = in_inst[inst_idx];
		mat4 M = transforms[inst.transform_idx];
		mat4 prev_MVP = ubo.prev_world_to_clip * M;

		vec3 aabb_min = inst.min_xyzr.xyz - inst.max_xyzr.w;
		vec3 aabb_max = inst.max_xyzr.xyz + inst.max_xyzr.w;

		// Frustum Culling
		if (ubo.frustum_culling == 1) {
			mat4 curr_MVP = ubo.world_to_clip * M;
			vec3 uv_aabb_min, uv_aabb_max;
			project_aabb(aabb_min, aabb_max, curr_MVP, uv_aabb_min, uv_aabb_max);
			if (!cull_frustum(uv_aabb_min, uv_aabb_max)) {
				return;
			}
		}

		bool visible = true;

		// HiZ Culling
		if (ubo.depth_culling == 1) {
			vec3 uv_aabb_min, uv_aabb_max;
			project_aabb(aabb_min, aabb_max, prev_MVP, uv_aabb_min, uv_aabb_max);
			visible = visible && cull_hiz(uv_aabb_min, uv_aabb_max, in_depth_pyramid_tex, ubo.depth_pyramid_width, ubo.depth_pyramid_height);
		}

		// @TODO PERF: Batch the global atomic operations using Subgroup and GSM
		// to reduce strain on L2
		if (visible) {
			uint offset = atomicAdd(param.instance_vis_count, 1);
			out_inst_vis_idx[offset] = inst_idx;

			uint wg_size = offset + 1;
			atomicMax(param.inst_clust_cull_cmd.num_groups_x, wg_size);
		} else {
			uint offset = atomicAdd(param.instance_occ_count, 1);
			out_inst_occ_idx[offset] = inst_idx;

			uint wg_size = DIV_UP(offset + 1, INSTANCE_CULL_GROUP_SIZE);
			atomicMax(param.inst_cull_late_cmd.num_groups_x, wg_size);
		}
	}
}