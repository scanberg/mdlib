#version 430 core

#define QUANTIZATION_SCALE_FACTOR 1.0e6
#define MAX_GROUPS 16

// This is exposed as an image since we want to perform atomic float operations on it...
layout(binding = 0, r32f) readonly restrict uniform image3D in_vol;

layout (binding = 0, std430) readonly restrict buffer PointBuffer {
    vec4 in_points_geom[];
};

layout (binding = 1, std430) readonly restrict buffer PointGroupIndexBuffer {
    uint in_point_group_idx[];
};

layout (binding = 2, std430) buffer GroupValueBuffer {
    uint out_group_values[MAX_GROUPS];
};

layout(location = 0) uniform mat4 in_world_to_model;
layout(location = 1) uniform mat4 in_index_to_world;
layout(location = 2) uniform vec3 in_step;
layout(location = 3) uniform uint in_num_points;

shared uint  num_points;
shared vec4  points_geom[1024];
shared uint  points_group_index[1024];

shared uint  group_values[MAX_GROUPS];

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() {
    uint thread_id = gl_LocalInvocationIndex;
    uint wg_size   = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;

    if (thread_id == 0) {
        num_points = 0;
    }
    if (thread_id < MAX_GROUPS) {
        group_values[thread_id] = 0;
    }

    barrier();

    // Step 1: Load and test points against current block
    vec3 aabb_min = vec3( gl_WorkGroupID.xyz                 * gl_WorkGroupSize.xyz) * in_step;
    vec3 aabb_max = vec3((gl_WorkGroupID.xyz + uvec3(1,1,1)) * gl_WorkGroupSize.xyz) * in_step;

    for (uint i = thread_id; i < num_points; i += wg_size) {
        vec3 coord   = vec3(in_world_to_model * vec4(in_points_geom[i].xyz, 1.0));
        float radius = in_points_geom[i].w;
        vec3 clamped = clamp(coord, aabb_min, aabb_max);
        vec3 delta = clamped - coord;
        float r2 = dot(delta, delta);

        if (r2 < radius * radius) {
            // Push to workgroup GTOs
            uint idx = atomicAdd(num_points, 1);
            points_geom[idx] = in_points_geom[i];
            points_group_index[idx] = in_point_group_idx[i];
        }
    }

    // Wait for all threads to add group shared points
    barrier();

    ivec3 vol_idx = ivec3(gl_GlobalInvocationID.xyz);
    if (all(lessThan(vol_idx, imageSize(in_vol)))) {
        vec3 coord = vec3(in_index_to_world * vec4(vec3(vol_idx), 1.0));
        float psi = imageLoad(in_vol, vol_idx).x;

        // Step 2: Find closest point (in the workgroup) for the coord and attribute to group index
        uint closest_group_idx = MAX_GROUPS;
        float closest_d2 = 1.0e20;
        for (uint i = 0; i < num_points; ++i) {
            vec3 delta = coord - points_geom[i].xyz;
            float d2 = dot(delta, delta) - points_geom[i].w * points_geom[i].w;

            if (d2 < closest_d2) {
                closest_d2 = d2;
                closest_group_idx = points_group_index[i];
            }
        }

        if (closest_group_idx < MAX_GROUPS) {
            uint quantized_value = uint(round(psi * QUANTIZATION_SCALE_FACTOR));
            atomicAdd(group_values[closest_group_idx], quantized_value);
        }
    }

    // Wait for all threads to write group values
    barrier();

    // Step 5: Write out results to groups
    if (thread_id < MAX_GROUPS) {
        atomicAdd(out_group_values[thread_id], group_values[thread_id]);
    }
}